type MyType {
  id: ID!
  title: String!
  content: String!
  price: Int
  rating: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMyTypeConnection {
  items: [MyType]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelMyTypeFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  price: ModelIntInput
  rating: ModelFloatInput
  and: [ModelMyTypeFilterInput]
  or: [ModelMyTypeFilterInput]
  not: ModelMyTypeFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getMyType(id: ID!): MyType
  listMyTypes(filter: ModelMyTypeFilterInput, limit: Int, nextToken: String): ModelMyTypeConnection
}

input CreateMyTypeInput {
  id: ID
  title: String!
  content: String!
  price: Int
  rating: Float
}

input UpdateMyTypeInput {
  id: ID!
  title: String
  content: String
  price: Int
  rating: Float
}

input DeleteMyTypeInput {
  id: ID
}

type Mutation {
  createMyType(input: CreateMyTypeInput!, condition: ModelMyTypeConditionInput): MyType
  updateMyType(input: UpdateMyTypeInput!, condition: ModelMyTypeConditionInput): MyType
  deleteMyType(input: DeleteMyTypeInput!, condition: ModelMyTypeConditionInput): MyType
}

input ModelMyTypeConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  price: ModelIntInput
  rating: ModelFloatInput
  and: [ModelMyTypeConditionInput]
  or: [ModelMyTypeConditionInput]
  not: ModelMyTypeConditionInput
}

type Subscription {
  onCreateMyType: MyType @aws_subscribe(mutations: ["createMyType"])
  onUpdateMyType: MyType @aws_subscribe(mutations: ["updateMyType"])
  onDeleteMyType: MyType @aws_subscribe(mutations: ["deleteMyType"])
}
